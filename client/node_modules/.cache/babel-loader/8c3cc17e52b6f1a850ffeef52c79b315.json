{"ast":null,"code":"import _slicedToArray from \"/Users/mikemcguire/Projects/react-memory-game/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mikemcguire/Projects/react-memory-game/client/src/Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Board from './components/Board';\nimport initializeDeck from './deck';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  }\n}));\nexport default function Dashboard() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        setCards = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        flipped = _useState4[0],\n        setFlipped = _useState4[1];\n\n  const _useState5 = useState(400),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dimension = _useState6[0],\n        setDimension = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        solved = _useState8[0],\n        setSolved = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        disabled = _useState10[0],\n        setDisabled = _useState10[1];\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n\n    setFlipped([...flipped, id]);\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(Math.min(document.documentElement.clientWidth, document.documentElement.clientHeight));\n  };\n\n  const classes = useStyles();\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"React Memory Game\"), React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Take turns picking two matching cards\"), React.createElement(Board, {\n    dimension: dimension,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disabled: disabled,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/mikemcguire/Projects/react-memory-game/client/src/Dashboard.js"],"names":["React","useState","useEffect","makeStyles","Paper","Typography","Board","initializeDeck","useStyles","theme","root","margin","padding","spacing","Dashboard","cards","setCards","flipped","setFlipped","dimension","setDimension","solved","setSolved","disabled","setDisabled","resizeBoard","resizeListener","window","addEventListener","removeEventListener","handleClick","id","length","sameCardClicked","isMatch","resetCards","setTimeout","includes","clickedCard","find","card","flippedCard","type","Math","min","document","documentElement","clientWidth","clientHeight","classes"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,cAAP,MAA2B,QAA3B;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAACM,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,MADJ;AAEJC,IAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiB,CAAjB;AAFL;AAD+B,CAAL,CAAN,CAA5B;AAOA,eAAe,SAASC,SAAT,GAAqB;AAAA,oBACRb,QAAQ,CAAC,EAAD,CADA;AAAA;AAAA,QAC3Bc,KAD2B;AAAA,QACpBC,QADoB;;AAAA,qBAEJf,QAAQ,CAAC,EAAD,CAFJ;AAAA;AAAA,QAE3BgB,OAF2B;AAAA,QAElBC,UAFkB;;AAAA,qBAGAjB,QAAQ,CAAC,GAAD,CAHR;AAAA;AAAA,QAG3BkB,SAH2B;AAAA,QAGhBC,YAHgB;;AAAA,qBAINnB,QAAQ,CAAC,EAAD,CAJF;AAAA;AAAA,QAI3BoB,MAJ2B;AAAA,QAInBC,SAJmB;;AAAA,qBAKFrB,QAAQ,CAAC,KAAD,CALN;AAAA;AAAA,QAK3BsB,QAL2B;AAAA,QAKjBC,WALiB;;AAOlCtB,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,WAAW;AACXT,IAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,cAAc,GAAGC,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCH,WAAlC,CAAvB;AAEA,WAAO,MAAME,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,cAArC,CAAb;AACD,GAJQ,CAAT;;AAMA,QAAMI,WAAW,GAAGC,EAAE,IAAI;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,QAAIP,OAAO,CAACe,MAAR,KAAmB,CAAvB,EAA0B;AACxBd,MAAAA,UAAU,CAAC,CAACa,EAAD,CAAD,CAAV;AACAP,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAHD,MAGO;AACL,UAAIS,eAAe,CAACF,EAAD,CAAnB,EAAyB;AACzBb,MAAAA,UAAU,CAAC,CAACD,OAAO,CAAC,CAAD,CAAR,EAAac,EAAb,CAAD,CAAV;;AACA,UAAIG,OAAO,CAACH,EAAD,CAAX,EAAiB;AACfT,QAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYJ,OAAO,CAAC,CAAD,CAAnB,EAAwBc,EAAxB,CAAD,CAAT;AACAI,QAAAA,UAAU;AACX,OAHD,MAGO;AACLC,QAAAA,UAAU,CAACD,UAAD,EAAa,IAAb,CAAV;AACD;AACF;;AACDjB,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAac,EAAb,CAAD,CAAV;AACD,GAhBD;;AAkBA,QAAMI,UAAU,GAAG,MAAM;AACvBjB,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAM,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHD;;AAIA,QAAMS,eAAe,GAAGF,EAAE,IAAId,OAAO,CAACoB,QAAR,CAAiBN,EAAjB,CAA9B;;AAEA,QAAMG,OAAO,GAAGH,EAAE,IAAI;AACpB,UAAMO,WAAW,GAAGvB,KAAK,CAACwB,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAA/B,CAApB;AACA,UAAMU,WAAW,GAAG1B,KAAK,CAACwB,IAAN,CAAWC,IAAI,IAAIvB,OAAO,CAAC,CAAD,CAAP,KAAeuB,IAAI,CAACT,EAAvC,CAApB;AACA,WAAOU,WAAW,CAACC,IAAZ,KAAqBJ,WAAW,CAACI,IAAxC;AACD,GAJD;;AAMA,QAAMjB,WAAW,GAAG,MAAM;AACxBL,IAAAA,YAAY,CACVuB,IAAI,CAACC,GAAL,CACEC,QAAQ,CAACC,eAAT,CAAyBC,WAD3B,EAEEF,QAAQ,CAACC,eAAT,CAAyBE,YAF3B,CADU,CAAZ;AAMD,GAPD;;AASA,QAAMC,OAAO,GAAGzC,SAAS,EAAzB;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEyC,OAAO,CAACvC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAIE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAJF,EAOE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAES,SADb;AAEE,IAAA,KAAK,EAAEJ,KAFT;AAGE,IAAA,OAAO,EAAEE,OAHX;AAIE,IAAA,WAAW,EAAEa,WAJf;AAKE,IAAA,QAAQ,EAAEP,QALZ;AAME,IAAA,MAAM,EAAEF,MANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CADF;AAoBD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Board from './components/Board';\nimport initializeDeck from './deck';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: '50px',\n    padding: theme.spacing(3, 2)\n  }\n}));\n\nexport default function Dashboard() {\n  const [cards, setCards] = useState([]);\n  const [flipped, setFlipped] = useState([]);\n  const [dimension, setDimension] = useState(400);\n  const [solved, setSolved] = useState([]);\n  const [disabled, setDisabled] = useState(false);\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initializeDeck());\n  }, []);\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard);\n\n    return () => window.removeEventListener('resize', resizeListener);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardClicked(id)) return;\n      setFlipped([flipped[0], id]);\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 2000);\n      }\n    }\n    setFlipped([...flipped, id]);\n  };\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n  const sameCardClicked = id => flipped.includes(id);\n\n  const isMatch = id => {\n    const clickedCard = cards.find(card => card.id === id);\n    const flippedCard = cards.find(card => flipped[0] === card.id);\n    return flippedCard.type === clickedCard.type;\n  };\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight\n      )\n    );\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Paper className={classes.root}>\n        <Typography variant='h4' component='h4'>\n          React Memory Game\n        </Typography>\n        <Typography variant='h5' component='h5'>\n          Take turns picking two matching cards\n        </Typography>\n        <Board\n          dimension={dimension}\n          cards={cards}\n          flipped={flipped}\n          handleClick={handleClick}\n          disabled={disabled}\n          solved={solved}\n        />\n      </Paper>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}